<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yushan.backend.dao.VoteMapper" >
  <resultMap id="BaseResultMap" type="com.yushan.backend.entity.Vote" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="OTHER" javaType="java.util.UUID" />
      <arg column="novel_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, novel_id, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from vote
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from vote
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yushan.backend.entity.Vote" useGeneratedKeys="true" keyProperty="id">
    insert into vote (id, user_id, novel_id, create_time, update_time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=OTHER}, #{novelId,jdbcType=INTEGER}, 
            NOW(), NOW())
  </insert>
  <insert id="insertSelective" parameterType="com.yushan.backend.entity.Vote" useGeneratedKeys="true" keyProperty="id">
    insert into vote
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="novelId != null" >
        novel_id,
      </if>
        create_time,
        update_time,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=OTHER},
      </if>
      <if test="novelId != null" >
        #{novelId,jdbcType=INTEGER},
      </if>
      NOW(),
      NOW()
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yushan.backend.entity.Vote" >
    update vote
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=OTHER},
      </if>
      <if test="novelId != null" >
        novel_id = #{novelId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
        update_time = NOW()
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yushan.backend.entity.Vote" >
    update vote
    set user_id = #{userId,jdbcType=OTHER},
        novel_id = #{novelId,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = NOW()
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- Methods to update novel vote count -->
  <update id="incrementVoteCount">
    update novel
    set vote_cnt = vote_cnt + 1,
        update_time = NOW()
    where id = #{novelId,jdbcType=INTEGER}
  </update>

  <update id="decrementVoteCount">
    update novel
    set vote_cnt = vote_cnt - 1,
        update_time = NOW()
    where id = #{novelId,jdbcType=INTEGER}
  </update>

    <select id="countByUserId" resultType="long">
        select count(*)
        from vote
        where user_id = #{userId,jdbcType=OTHER}
    </select>

    <select id="selectByUserIdWithPagination" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from vote
        where user_id = #{userId,jdbcType=OTHER}
        order by create_time desc
        limit #{limit,jdbcType=INTEGER} offset #{offset,jdbcType=INTEGER}
    </select>
</mapper>